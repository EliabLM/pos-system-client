generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id             String          @id @default(cuid())
  name           String
  email          String
  nit            String?
  phone          String?
  address        String?
  city           String?
  department     String?
  taxId          String?
  isActive       Boolean         @default(true)
  isDeleted      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  brands         Brand[]
  categories     Category[]
  customers      Customer[]
  paymentMethods PaymentMethod[]
  products       Product[]
  stockMovements StockMovement[]
  stores         Store[]
  suppliers      Supplier[]
  systemConfigs  SystemConfig[]
  unitMeasures   UnitMeasure[]
  users          User[]

  @@map("organizations")
}

model Store {
  id               String       @id @default(cuid())
  organizationId   String
  name             String
  description      String?
  address          String
  city             String?
  department       String?
  phone            String?
  saleNumberPrefix String       @default("")
  lastSaleNumber   Int          @default(0)
  isActive         Boolean      @default(true)
  isDeleted        Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?
  sales            Sale[]
  organization     Organization @relation(fields: [organizationId], references: [id])
  users            User[]

  @@unique([organizationId, name], name: "unique_store_name_per_org")
  @@map("stores")
}

model User {
  id             String          @id @default(cuid())
  organizationId String?
  storeId        String?
  clerkId        String          @unique
  email          String
  username       String
  firstName      String
  lastName       String
  role           UserRole        @default(SELLER)
  isActive       Boolean         @default(true)
  isDeleted      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  sales          Sale[]
  stockMovements StockMovement[]
  organization   Organization?   @relation(fields: [organizationId], references: [id])
  store          Store?          @relation(fields: [storeId], references: [id])

  @@map("users")
}

model Category {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?
  isActive       Boolean      @default(true)
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])
  products       Product[]

  @@unique([organizationId, name, deletedAt], name: "unique_category_name_per_org")
  @@map("categories")
}

model Brand {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  logo           String?
  description    String?
  isActive       Boolean      @default(true)
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])
  products       Product[]

  @@unique([organizationId, name, deletedAt], name: "unique_brand_name_per_org")
  @@map("brands")
}

model UnitMeasure {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  abbreviation   String
  isActive       Boolean      @default(true)
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  products       Product[]
  saleItems      SaleItem[]
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, name, deletedAt], name: "unique_unit_name_per_org")
  @@unique([organizationId, abbreviation, deletedAt], name: "unique_unit_abbrev_per_org")
  @@map("unit_measures")
}

model Product {
  id             String          @id @default(cuid())
  organizationId String
  name           String
  description    String?
  image          String?
  barcode        String?
  sku            String?
  categoryId     String?
  brandId        String?
  unitMeasureId  String
  costPrice      Float
  salePrice      Float
  minStock       Int             @default(0)
  currentStock   Int             @default(0)
  alcoholGrade   Float?
  volume         Float?
  size           String?
  color          String?
  model          String?
  isActive       Boolean         @default(true)
  isDeleted      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  brand          Brand?          @relation(fields: [brandId], references: [id])
  category       Category?       @relation(fields: [categoryId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id])
  unitMeasure    UnitMeasure     @relation(fields: [unitMeasureId], references: [id])
  purchaseItems  PurchaseItem[]
  saleItems      SaleItem[]
  stockMovements StockMovement[]

  @@unique([organizationId, barcode, deletedAt], name: "unique_barcode_per_org")
  @@unique([organizationId, sku, deletedAt], name: "unique_sku_per_org")
  @@map("products")
}

model Customer {
  id             String       @id @default(cuid())
  organizationId String
  firstName      String
  lastName       String
  email          String?
  phone          String?
  address        String?
  city           String?
  department     String?
  document       String?
  documentType   String?
  isActive       Boolean      @default(true)
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])
  sales          Sale[]

  @@unique([organizationId, email, deletedAt], name: "unique_customer_email_per_org")
  @@unique([organizationId, document, deletedAt], name: "unique_customer_document_per_org")
  @@map("customers")
}

model Supplier {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  contactName    String?
  email          String?
  phone          String?
  address        String?
  city           String?
  department     String?
  taxId          String?
  isActive       Boolean      @default(true)
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  purchases      Purchase[]
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, taxId, deletedAt], name: "unique_supplier_taxid_per_org")
  @@map("suppliers")
}

model PaymentMethod {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  type           PaymentType
  isActive       Boolean       @default(true)
  isDeleted      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  organization   Organization  @relation(fields: [organizationId], references: [id])
  salePayments   SalePayment[]

  @@unique([organizationId, name, deletedAt], name: "unique_payment_method_per_org")
  @@map("payment_methods")
}

model Sale {
  id             String        @id @default(cuid())
  organizationId String
  storeId        String
  saleNumber     String
  customerId     String?
  userId         String
  subtotal       Float
  total          Float
  status         SaleStatus    @default(PAID)
  saleDate       DateTime      @default(now())
  dueDate        DateTime?
  paidDate       DateTime?
  notes          String?
  isDeleted      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  saleItems      SaleItem[]
  salePayments   SalePayment[]
  customer       Customer?     @relation(fields: [customerId], references: [id])
  store          Store         @relation(fields: [storeId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@unique([storeId, saleNumber, deletedAt], name: "unique_sale_number_per_store")
  @@map("sales")
}

model SaleItem {
  id            String      @id @default(cuid())
  saleId        String
  productId     String
  unitMeasureId String
  quantity      Int
  unitPrice     Float
  subtotal      Float
  isDeleted     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  product       Product     @relation(fields: [productId], references: [id])
  sale          Sale        @relation(fields: [saleId], references: [id])
  unitMeasure   UnitMeasure @relation(fields: [unitMeasureId], references: [id])

  @@map("sale_items")
}

model SalePayment {
  id              String        @id @default(cuid())
  saleId          String
  paymentMethodId String
  amount          Float
  reference       String?
  notes           String?
  paymentDate     DateTime      @default(now())
  isDeleted       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  sale            Sale          @relation(fields: [saleId], references: [id])

  @@map("sale_payments")
}

model Purchase {
  id             String         @id @default(cuid())
  organizationId String
  supplierId     String
  purchaseNumber String
  total          Float
  status         PurchaseStatus @default(PENDING)
  purchaseDate   DateTime       @default(now())
  receivedDate   DateTime?
  notes          String?
  isDeleted      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  purchaseItems  PurchaseItem[]
  supplier       Supplier       @relation(fields: [supplierId], references: [id])

  @@map("purchases")
}

model PurchaseItem {
  id         String    @id @default(cuid())
  purchaseId String
  productId  String
  quantity   Int
  unitPrice  Float
  subtotal   Float
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  product    Product   @relation(fields: [productId], references: [id])
  purchase   Purchase  @relation(fields: [purchaseId], references: [id])

  @@map("purchase_items")
}

model StockMovement {
  id             String            @id @default(cuid())
  organizationId String
  productId      String
  storeId        String?
  type           StockMovementType
  quantity       Int
  previousStock  Int
  newStock       Int
  reason         String?
  userId         String?
  reference      String?
  createdAt      DateTime          @default(now())
  organization   Organization      @relation(fields: [organizationId], references: [id])
  product        Product           @relation(fields: [productId], references: [id])
  user           User?             @relation(fields: [userId], references: [id])

  @@index([organizationId, productId, createdAt])
  @@map("stock_movements")
}

model SystemConfig {
  id             String       @id @default(cuid())
  organizationId String
  key            String
  value          String
  type           String       @default("STRING")
  description    String?
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, key, deletedAt], name: "unique_system_config_per_org")
  @@map("system_configs")
}

enum UserRole {
  ADMIN
  SELLER
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
}

enum PaymentType {
  CASH
  CARD
  TRANSFER
  CREDIT
  CHECK
  OTHER
}

enum SaleStatus {
  PAID
  PENDING
  OVERDUE
  CANCELLED
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELLED
}
